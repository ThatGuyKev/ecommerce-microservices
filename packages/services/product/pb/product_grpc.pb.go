// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: _proto/product.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductServiceClient is the client API for ProductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductServiceClient interface {
	// Product
	// rpc CreateProduct(CreateProductReq) returns (CreateProductRes) {}
	GetProductsByIds(ctx context.Context, in *GetProductsByIdsReq, opts ...grpc.CallOption) (*GetProductsByIdsRes, error)
	GetProductDetails(ctx context.Context, in *GetProductDetailsReq, opts ...grpc.CallOption) (*GetProductDetailsRes, error)
	// Assets
	GetProductAssetsByProductId(ctx context.Context, in *GetProductAssetsByProductIdReq, opts ...grpc.CallOption) (*GetProductAssetsByProductIdRes, error)
	// rpc CreateProductAsset(CreateProductAssetReq)
	//
	//	returns (CreateProductAssetRes) {}
	GetProductAssetById(ctx context.Context, in *GetProductAssetByIdReq, opts ...grpc.CallOption) (*GetProductAssetByIdRes, error)
	// rpc UpdateProductAsset(UpdateProductAssetReq)
	//
	//	returns (UpdateProductAssetRes) {}
	//
	// rpc DeleteProductAsset(DeleteProductAssetReq)
	//
	//	returns (DeleteProductAssetRes) {}
	//
	// Variants
	GetProductVariants(ctx context.Context, in *GetProductVariantsReq, opts ...grpc.CallOption) (*GetProductVariantsRes, error)
	// rpc CreateProductVariant(CreateProductVariantReq)
	//
	//	returns (CreateProductVariantRes) {}
	//
	// rpc UpdateProductVariant(UpdateProductVariantReq)
	//
	//	returns (UpdateProductVariantRes) {}
	//
	// rpc DeleteProductVariant(DeleteProductVariantReq)
	//
	//	returns (DeleteProductVariantRes) {}
	//
	// Category
	// rpc CreateCategory(CreateCategoryReq) returns (CreateCategoryRes) {}
	GetCategoryDetails(ctx context.Context, in *GetCategoryDetailsReq, opts ...grpc.CallOption) (*GetCategoryDetailsRes, error)
	GetCategoriesByIds(ctx context.Context, in *GetCategoriesByIdsReq, opts ...grpc.CallOption) (*GetCategoriesByIdsRes, error)
	GetProductCategories(ctx context.Context, in *GetProductCategoriesReq, opts ...grpc.CallOption) (*GetProductCategoriesRes, error)
}

type productServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductServiceClient(cc grpc.ClientConnInterface) ProductServiceClient {
	return &productServiceClient{cc}
}

func (c *productServiceClient) GetProductsByIds(ctx context.Context, in *GetProductsByIdsReq, opts ...grpc.CallOption) (*GetProductsByIdsRes, error) {
	out := new(GetProductsByIdsRes)
	err := c.cc.Invoke(ctx, "/product.ProductService/GetProductsByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductDetails(ctx context.Context, in *GetProductDetailsReq, opts ...grpc.CallOption) (*GetProductDetailsRes, error) {
	out := new(GetProductDetailsRes)
	err := c.cc.Invoke(ctx, "/product.ProductService/GetProductDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductAssetsByProductId(ctx context.Context, in *GetProductAssetsByProductIdReq, opts ...grpc.CallOption) (*GetProductAssetsByProductIdRes, error) {
	out := new(GetProductAssetsByProductIdRes)
	err := c.cc.Invoke(ctx, "/product.ProductService/GetProductAssetsByProductId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductAssetById(ctx context.Context, in *GetProductAssetByIdReq, opts ...grpc.CallOption) (*GetProductAssetByIdRes, error) {
	out := new(GetProductAssetByIdRes)
	err := c.cc.Invoke(ctx, "/product.ProductService/GetProductAssetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductVariants(ctx context.Context, in *GetProductVariantsReq, opts ...grpc.CallOption) (*GetProductVariantsRes, error) {
	out := new(GetProductVariantsRes)
	err := c.cc.Invoke(ctx, "/product.ProductService/GetProductVariants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetCategoryDetails(ctx context.Context, in *GetCategoryDetailsReq, opts ...grpc.CallOption) (*GetCategoryDetailsRes, error) {
	out := new(GetCategoryDetailsRes)
	err := c.cc.Invoke(ctx, "/product.ProductService/GetCategoryDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetCategoriesByIds(ctx context.Context, in *GetCategoriesByIdsReq, opts ...grpc.CallOption) (*GetCategoriesByIdsRes, error) {
	out := new(GetCategoriesByIdsRes)
	err := c.cc.Invoke(ctx, "/product.ProductService/GetCategoriesByIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productServiceClient) GetProductCategories(ctx context.Context, in *GetProductCategoriesReq, opts ...grpc.CallOption) (*GetProductCategoriesRes, error) {
	out := new(GetProductCategoriesRes)
	err := c.cc.Invoke(ctx, "/product.ProductService/GetProductCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServiceServer is the server API for ProductService service.
// All implementations must embed UnimplementedProductServiceServer
// for forward compatibility
type ProductServiceServer interface {
	// Product
	// rpc CreateProduct(CreateProductReq) returns (CreateProductRes) {}
	GetProductsByIds(context.Context, *GetProductsByIdsReq) (*GetProductsByIdsRes, error)
	GetProductDetails(context.Context, *GetProductDetailsReq) (*GetProductDetailsRes, error)
	// Assets
	GetProductAssetsByProductId(context.Context, *GetProductAssetsByProductIdReq) (*GetProductAssetsByProductIdRes, error)
	// rpc CreateProductAsset(CreateProductAssetReq)
	//
	//	returns (CreateProductAssetRes) {}
	GetProductAssetById(context.Context, *GetProductAssetByIdReq) (*GetProductAssetByIdRes, error)
	// rpc UpdateProductAsset(UpdateProductAssetReq)
	//
	//	returns (UpdateProductAssetRes) {}
	//
	// rpc DeleteProductAsset(DeleteProductAssetReq)
	//
	//	returns (DeleteProductAssetRes) {}
	//
	// Variants
	GetProductVariants(context.Context, *GetProductVariantsReq) (*GetProductVariantsRes, error)
	// rpc CreateProductVariant(CreateProductVariantReq)
	//
	//	returns (CreateProductVariantRes) {}
	//
	// rpc UpdateProductVariant(UpdateProductVariantReq)
	//
	//	returns (UpdateProductVariantRes) {}
	//
	// rpc DeleteProductVariant(DeleteProductVariantReq)
	//
	//	returns (DeleteProductVariantRes) {}
	//
	// Category
	// rpc CreateCategory(CreateCategoryReq) returns (CreateCategoryRes) {}
	GetCategoryDetails(context.Context, *GetCategoryDetailsReq) (*GetCategoryDetailsRes, error)
	GetCategoriesByIds(context.Context, *GetCategoriesByIdsReq) (*GetCategoriesByIdsRes, error)
	GetProductCategories(context.Context, *GetProductCategoriesReq) (*GetProductCategoriesRes, error)
	mustEmbedUnimplementedProductServiceServer()
}

// UnimplementedProductServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductServiceServer struct {
}

func (UnimplementedProductServiceServer) GetProductsByIds(context.Context, *GetProductsByIdsReq) (*GetProductsByIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsByIds not implemented")
}
func (UnimplementedProductServiceServer) GetProductDetails(context.Context, *GetProductDetailsReq) (*GetProductDetailsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductDetails not implemented")
}
func (UnimplementedProductServiceServer) GetProductAssetsByProductId(context.Context, *GetProductAssetsByProductIdReq) (*GetProductAssetsByProductIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAssetsByProductId not implemented")
}
func (UnimplementedProductServiceServer) GetProductAssetById(context.Context, *GetProductAssetByIdReq) (*GetProductAssetByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductAssetById not implemented")
}
func (UnimplementedProductServiceServer) GetProductVariants(context.Context, *GetProductVariantsReq) (*GetProductVariantsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductVariants not implemented")
}
func (UnimplementedProductServiceServer) GetCategoryDetails(context.Context, *GetCategoryDetailsReq) (*GetCategoryDetailsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryDetails not implemented")
}
func (UnimplementedProductServiceServer) GetCategoriesByIds(context.Context, *GetCategoriesByIdsReq) (*GetCategoriesByIdsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoriesByIds not implemented")
}
func (UnimplementedProductServiceServer) GetProductCategories(context.Context, *GetProductCategoriesReq) (*GetProductCategoriesRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductCategories not implemented")
}
func (UnimplementedProductServiceServer) mustEmbedUnimplementedProductServiceServer() {}

// UnsafeProductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServiceServer will
// result in compilation errors.
type UnsafeProductServiceServer interface {
	mustEmbedUnimplementedProductServiceServer()
}

func RegisterProductServiceServer(s grpc.ServiceRegistrar, srv ProductServiceServer) {
	s.RegisterService(&ProductService_ServiceDesc, srv)
}

func _ProductService_GetProductsByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductsByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductsByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductService/GetProductsByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductsByIds(ctx, req.(*GetProductsByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductService/GetProductDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductDetails(ctx, req.(*GetProductDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductAssetsByProductId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductAssetsByProductIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductAssetsByProductId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductService/GetProductAssetsByProductId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductAssetsByProductId(ctx, req.(*GetProductAssetsByProductIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductAssetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductAssetByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductAssetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductService/GetProductAssetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductAssetById(ctx, req.(*GetProductAssetByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductVariants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductVariantsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductVariants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductService/GetProductVariants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductVariants(ctx, req.(*GetProductVariantsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetCategoryDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetCategoryDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductService/GetCategoryDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetCategoryDetails(ctx, req.(*GetCategoryDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetCategoriesByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoriesByIdsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetCategoriesByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductService/GetCategoriesByIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetCategoriesByIds(ctx, req.(*GetCategoriesByIdsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductService_GetProductCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductCategoriesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServiceServer).GetProductCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product.ProductService/GetProductCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServiceServer).GetProductCategories(ctx, req.(*GetProductCategoriesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductService_ServiceDesc is the grpc.ServiceDesc for ProductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductService",
	HandlerType: (*ProductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductsByIds",
			Handler:    _ProductService_GetProductsByIds_Handler,
		},
		{
			MethodName: "GetProductDetails",
			Handler:    _ProductService_GetProductDetails_Handler,
		},
		{
			MethodName: "GetProductAssetsByProductId",
			Handler:    _ProductService_GetProductAssetsByProductId_Handler,
		},
		{
			MethodName: "GetProductAssetById",
			Handler:    _ProductService_GetProductAssetById_Handler,
		},
		{
			MethodName: "GetProductVariants",
			Handler:    _ProductService_GetProductVariants_Handler,
		},
		{
			MethodName: "GetCategoryDetails",
			Handler:    _ProductService_GetCategoryDetails_Handler,
		},
		{
			MethodName: "GetCategoriesByIds",
			Handler:    _ProductService_GetCategoriesByIds_Handler,
		},
		{
			MethodName: "GetProductCategories",
			Handler:    _ProductService_GetProductCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "_proto/product.proto",
}
