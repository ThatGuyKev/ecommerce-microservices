// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: _proto/gamification.proto

package pb

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GamificationServiceClient is the client API for GamificationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GamificationServiceClient interface {
}

type gamificationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGamificationServiceClient(cc grpc.ClientConnInterface) GamificationServiceClient {
	return &gamificationServiceClient{cc}
}

// GamificationServiceServer is the server API for GamificationService service.
// All implementations must embed UnimplementedGamificationServiceServer
// for forward compatibility
type GamificationServiceServer interface {
	mustEmbedUnimplementedGamificationServiceServer()
}

// UnimplementedGamificationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGamificationServiceServer struct {
}

func (UnimplementedGamificationServiceServer) mustEmbedUnimplementedGamificationServiceServer() {}

// UnsafeGamificationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GamificationServiceServer will
// result in compilation errors.
type UnsafeGamificationServiceServer interface {
	mustEmbedUnimplementedGamificationServiceServer()
}

func RegisterGamificationServiceServer(s grpc.ServiceRegistrar, srv GamificationServiceServer) {
	s.RegisterService(&GamificationService_ServiceDesc, srv)
}

// GamificationService_ServiceDesc is the grpc.ServiceDesc for GamificationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GamificationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamification.GamificationService",
	HandlerType: (*GamificationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "_proto/gamification.proto",
}
